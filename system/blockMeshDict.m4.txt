//Parametrized Engine Curve
//Run using:
//m4 -P blockMeshDict.m4.txt > blockMeshDict
m4_changecom(//)m4_changequote([,])
m4_define(calc, [m4_esyscmd(perl -e 'use Math::Trig; printf ($1)')])
m4_define(VCOUNT, 0)
m4_define(vlabel, [[// ]Vertex $1 = VCOUNT m4_define($1, VCOUNT)m4_define([VCOUNT],m4_incr(VCOUNT))])

//Define pi
m4_define(pi, 3.1415926536)

//m4 macro input:
// Input Geometry
// Given:
m4_define(ChamberLength, 531.26)
m4_define(XLoxInletCenter, 15)
m4_define(ChamberDiameter, 50.28)
m4_define(InjectorRadius, 10)
m4_define(FuelInletCenterRadius, 15)
m4_define(ThroatDiameter, 49.8)
m4_define(ExpansionRatio, 2.25)
m4_define(LOXInjectorRadius, 2.0)
m4_define(FuelInjectorRadius, 2.0)

//Measured:
m4_define(XThroat, 532)
m4_define(XExit, 581)
m4_define(InjectorLength, 25)

//Axisymmetrical Wedge Slice Half-Angle(mirrored over the x-z plane)
m4_define(halfAngle, 0.5)

//For Uniform Grid(could be adapted to dx_avg for use with mesh scaling):
m4_define(dx, LOXInjectorRadius)
m4_define(dz, FuelInjectorRadius)

//Calculate Injector Vertices
m4_define(FuelInletTopRadius, calc(FuelInletCenterRadius + (FuelInjectorRadius / 2)))
m4_define(FuelInletBotRadius, calc(FuelInletCenterRadius - (FuelInjectorRadius / 2)))
m4_define(XLoxInletRight, calc(XLoxInletCenter + (LOXInjectorRadius / 2)))
m4_define(XLoxInletLeft, calc(XLoxInletCenter - (LOXInjectorRadius / 2)))

//Convert Diameter to Radius
m4_define(ChamberRadius, calc(ChamberDiameter / 2))
m4_define(ThroatRadius, calc(ThroatDiameter / 2))

//Convert Angle to Radians
m4_define(radAngle, calc(((90 - halfAngle) * pi) / 180))

//Calculate Exit Radius using Area and Expansion Ratio
m4_define(ThroatArea, calc(pi * (ThroatRadius * ThroatRadius)))
m4_define(ExitArea, calc(ThroatArea * ExpansionRatio))
m4_define(ExitRadius, calc(sqrt(ExitArea / pi)))

//Block 1 Veritces
m4_define(yInjector, calc(InjectorRadius * cos(radAngle)))
m4_define(zInjector, calc(InjectorRadius * sin(radAngle)))
m4_define(yInletBot, calc(FuelInletBotRadius * cos(radAngle)))
m4_define(zInletBot, calc(FuelInletBotRadius * sin(radAngle)))

//Block 2 Veritces
m4_define(yInletTop, calc(FuelInletTopRadius * cos(radAngle)))
m4_define(zInletTop, calc(FuelInletTopRadius * sin(radAngle)))

//Block 4 Vertices
m4_define(yChamberTop, calc(ChamberRadius * cos(radAngle)))
m4_define(zChamberTop, calc(ChamberRadius * sin(radAngle)))

//Block 8 Vertices
m4_define(yThroat, calc(ThroatRadius * cos(radAngle)))
m4_define(zThroat, calc(ThroatRadius * sin(radAngle)))

//Block 9 Vertices
m4_define(yExit, calc(ExitRadius * cos(radAngle)))
m4_define(zExit, calc(ExitRadius * sin(radAngle)))

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Cell Count - Defined
//n_z = 1 for all in order to create a "2D" grid

//Block 8
m4_define(n_y8, 25)
m4_define(n_x8, 1)

//Block 7
m4_define(n_y7, 5)

//Block 9
m4_define(n_x9, 60)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Cell Count - Coupled
//Block 9
m4_define(n_y9, n_y8)

//Block 7
m4_define(n_x7, calc(n_x8 + n_x9))

//Round Values to whole number
//Need to figure out how to do this, for now will input rounding manually.

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Mesh Grading Ratios for stitched/merged patches

// Chamber Calculations - Blocks 6, 8, and 9 ratios for Block 7 Grading
m4_define(b7Length, calc(XExit - ChamberLength))

m4_define(b8Tob7XRatio, calc((XThroat - ChamberLength) / b7Length))
m4_define(b8Tob7CellRatio, calc(n_x8 / n_x7))

m4_define(b9Tob7XRatio, calc((XExit - XThroat) / b7Length))
m4_define(b9Tob7CellRatio, calc(n_x9 / n_x7))
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
scale 0.001;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Load Variables calculated from m4 macro script above into the output to
//      utilize the variables found below to keep the output neat/readable
// Y-Z data for different radial lengths (height of cross-section)
radialInjector          zInjector;
FrwedgeInjector         yInjector;
BkwedgeInjector         -yInjector;

radialChamberWall       zChamberTop;
FrwedgeChamberWall      yChamberTop;
BkwedgeChamberWall      -yChamberTop;

radialThroat            zThroat;
FrwedgeThroat           yThroat;
BkwedgeThroat           -yThroat;

radialExit              zExit;
FrwedgeExit             yExit;
BkwedgeExit             -yExit;

// X data for different block sections
lengthStartConverge     ChamberLength;
lengthInjector          InjectorLength;
lengthThroat            XThroat;
lengthTotal             XExit;

vertices
(
//Block 7 Vertices
//name b7V0   ($lengthStartConverge 	    0 	                    0)		                    // Vertex #0
//name b7V1   ($lengthTotal 	        0 	                    0)		           	        // Vertex #3


//name b7V4   ($lengthStartConverge 	    $radialInjector 	    $FrwedgeInjector)		    // Vertex #4
//name b7V5   ($lengthTotal 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #5
//name b7V6   ($lengthTotal 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #6
//name b7V7   ($lengthStartConverge 	    $radialInjector 	    $BkwedgeInjector)           // Vertex #7

//Block 8 Vertices
//name b8V0   ($lengthStartConverge 	$radialInjector 	    $FrwedgeInjector)		    // Vertex #0
//name b8V1   ($lengthThroat 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #1
//name b8V2   ($lengthThroat 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #2
//name b8V3   ($lengthStartConverge 	$radialInjector 	    $BkwedgeInjector)		    // Vertex #3
name b8V0   ($lengthStartConverge 	    0 	                    0)		                    // Vertex #0
name b8V1   ($lengthThroat 	        0 	                    0)		           	        // Vertex #3

name b8V4   ($lengthStartConverge 	$radialChamberWall 	    $FrwedgeChamberWall)		// Vertex #4
name b8V5   ($lengthThroat 	        $radialThroat 	        $FrwedgeThroat)		        // Vertex #5
name b8V6   ($lengthThroat 	        $radialThroat 	        $BkwedgeThroat)		        // Vertex #6
name b8V7   ($lengthStartConverge 	$radialChamberWall 	    $BkwedgeChamberWall)

//Block 9 Vertices
//name b9V0   ($lengthThroat 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #0
//name b9V1   ($lengthTotal 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #1
//name b9V2   ($lengthTotal 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #2
//name b9V3   ($lengthThroat 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #3
name b9V0   ($lengthThroat 	    0 	                    0)		                    // Vertex #0
name b9V1   ($lengthTotal 	        0 	                    0)		           	        // Vertex #3
name b9V4   ($lengthThroat 	        $radialThroat 	        $FrwedgeThroat)		        // Vertex #4
name b9V5   ($lengthTotal 	        $radialExit 	        $FrwedgeExit)		        // Vertex #5
name b9V6   ($lengthTotal 	        $radialExit 	        $BkwedgeExit)		        // Vertex #6
name b9V7   ($lengthThroat 	        $radialThroat 	        $BkwedgeThroat)

);


blocks
(
//Block 7 - Centerline to Middle Main Chamber (including Injector tip)
//hex (b7V0 b7V1 b7V1 b7V0 b7V4 b7V5 b7V6 b7V7)   (n_x7  1 n_y7)
//    simpleGrading
//	(
//		(
//			(b8Tob7XRatio b8Tob7CellRatio 1)   //% x-dir, % cells, expansion coeff
//			(b9Tob7XRatio b9Tob7CellRatio 1)
//		)
//			1               // z-cell grading
//		    1               // y-cell grading
//	)

//Block 8 - Converging Section: Chamber to Throat
hex (b8V0 b8V1 b8V1 b8V0 b8V4 b8V5 b8V6 b8V7)   (n_x8  1 n_y8)  simpleGrading (1 1 1)

//Block 9 - Diverging Section: Throat to Exit
hex (b9V0 b9V1 b9V1 b9V0 b9V4 b9V5 b9V6 b9V7)   (n_x9  1 n_y9)  simpleGrading (1 1 1)

);

boundary
(
     front
     {
           type wedge;
           faces
           (
			   //(b7V0 b7V1 b7V5 b7V4)		//Block 7
			   (b8V0 b8V1 b8V5 b8V4)		//Block 8
			   (b9V0 b9V1 b9V5 b9V4)		//Block 9
           );
      }
     back
     {
           type wedge;
           faces
           (
			   //(b7V7 b7V6 b7V1 b7V0)		//Block 7
			   (b8V7 b8V6 b8V1 b8V0)		//Block 8
			   (b9V7 b9V6 b9V1 b9V0)		//Block 9
           );
      }
     walls
     {
           type wall;
           faces
           (
			   (b8V4 b8V5 b8V6 b8V7)	    //Block 8 - Converging Section Outer Wall
			   (b9V4 b9V5 b9V6 b9V7)	    //Block 9 - Diverging Section Outer Wall
           );
      }
    inlet
    {
          type patch;
          faces
          (
          (b8V4 b8V7 b8V0 b8V0)	    //Block 8 - Slave Merge Face
          //(b7V4 b7V7 b7V0 b7V0)	    //Block 7 - Injector Tip Y Plane
          );
    }
//       master6897
//     {
//           type patch;
//           faces
//           (
//               (b8V2 b8V1 b8V0 b8V3)	    //Block 6 - Master Merge Face
//               (b9V2 b9V1 b9V0 b9V3)	    //Block 6 - Master Merge Face
//           );
//      }
//      slave6897
//     {
//           type patch;
//           faces
//           (
//               (b7V4 b7V5 b7V6 b7V7)	    //Block 7 - Slave Merge Face
//           );
//      }
        master89
     {
           type patch;
           faces
           (
               (b8V6 b8V5 b8V1 b8V1)	    //Block 8 - Master Merge Face
           );
      }
      slave89
     {
           type patch;
           faces
           (
               (b9V4 b9V7 b9V0 b9V0)	    //Block 9 - Slave Merge Face
           );
      }
     outlet
     {
           type patch;
           faces
           (
               (b9V6 b9V5 b9V1 b9V1)	//Block 9 - Exit
               //(b7V6 b7V5 b7V1 b7V1)	//Block 7 - Exit
           );
      }
	 axis
     {
           type empty;
           faces
           (
			   //(b7V0 b7V1 b7V1 b7V0)		//Block 7
         (b8V0 b8V1 b8V1 b8V0)		//Block 8
         (b9V0 b9V1 b9V1 b9V0)		//Block 9
           );
	}
);

mergePatchPairs
(
    ( master89  slave89  )    //  merge patch 8 and 9
    //( master6897  slave6897  )  //  merge patch 6,8,9 and 7
);
