//Parametrized Engine Curve
//Run using:
//m4 -P blockMeshDict.m4.txt > blockMeshDict





//Define pi


//m4 macro input:
// Input Geometry
// Given:










//Measured:




//Axisymmetrical Wedge Slice Half-Angle(mirrored over the x-z plane)


//For Uniform Grid(could be adapted to dx_avg for use with mesh scaling):



//Calculate Injector Vertices





//Convert Diameter to Radius



//Convert Angle to Radians


//Calculate Exit Radius using Area and Expansion Ratio




//Block 1 Veritces





//Block 2 Veritces



//Block 4 Vertices



//Block 8 Vertices



//Block 9 Vertices



// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Cell Count - Defined
//n_z = 1 for all in order to create a "2D" grid

//Block 8



//Block 7


//Block 9


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Cell Count - Coupled
//Block 9


//Block 7


//Round Values to whole number
//Need to figure out how to do this, for now will input rounding manually.

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Mesh Grading Ratios for stitched/merged patches

// Chamber Calculations - Blocks 6, 8, and 9 ratios for Block 7 Grading







// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
scale 0.001;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
//Load Variables calculated from m4 macro script above into the output to
//      utilize the variables found below to keep the output neat/readable
// Y-Z data for different radial lengths (height of cross-section)
radialInjector          9.99961923064216;
FrwedgeInjector         0.0872653549329904;
BkwedgeInjector         -0.0872653549329904;

radialChamberWall       25.1390427458344;
FrwedgeChamberWall      0.219385102301538;
BkwedgeChamberWall      -0.219385102301538;

radialThroat            24.899051884299;
FrwedgeThroat           0.217290733783146;
BkwedgeThroat           -0.217290733783146;

radialExit              37.3485778264486;
FrwedgeExit             0.32593610067472;
BkwedgeExit             -0.32593610067472;

// X data for different block sections
lengthStartConverge     531.26;
lengthInjector          25;
lengthThroat            532;
lengthTotal             581;

vertices
(
//Block 7 Vertices
//name b7V0   ($lengthStartConverge 	    0 	                    0)		                    // Vertex #0
//name b7V1   ($lengthTotal 	        0 	                    0)		           	        // Vertex #3


//name b7V4   ($lengthStartConverge 	    $radialInjector 	    $FrwedgeInjector)		    // Vertex #4
//name b7V5   ($lengthTotal 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #5
//name b7V6   ($lengthTotal 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #6
//name b7V7   ($lengthStartConverge 	    $radialInjector 	    $BkwedgeInjector)           // Vertex #7

//Block 8 Vertices
//name b8V0   ($lengthStartConverge 	$radialInjector 	    $FrwedgeInjector)		    // Vertex #0
//name b8V1   ($lengthThroat 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #1
//name b8V2   ($lengthThroat 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #2
//name b8V3   ($lengthStartConverge 	$radialInjector 	    $BkwedgeInjector)		    // Vertex #3
name b8V0   ($lengthStartConverge 	    0 	                    0)		                    // Vertex #0
name b8V1   ($lengthThroat 	        0 	                    0)		           	        // Vertex #3

name b8V4   ($lengthStartConverge 	$radialChamberWall 	    $FrwedgeChamberWall)		// Vertex #4
name b8V5   ($lengthThroat 	        $radialThroat 	        $FrwedgeThroat)		        // Vertex #5
name b8V6   ($lengthThroat 	        $radialThroat 	        $BkwedgeThroat)		        // Vertex #6
name b8V7   ($lengthStartConverge 	$radialChamberWall 	    $BkwedgeChamberWall)

//Block 9 Vertices
//name b9V0   ($lengthThroat 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #0
//name b9V1   ($lengthTotal 	        $radialInjector 	    $FrwedgeInjector)		    // Vertex #1
//name b9V2   ($lengthTotal 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #2
//name b9V3   ($lengthThroat 	        $radialInjector 	    $BkwedgeInjector)		    // Vertex #3
name b9V0   ($lengthThroat 	    0 	                    0)		                    // Vertex #0
name b9V1   ($lengthTotal 	        0 	                    0)		           	        // Vertex #3
name b9V4   ($lengthThroat 	        $radialThroat 	        $FrwedgeThroat)		        // Vertex #4
name b9V5   ($lengthTotal 	        $radialExit 	        $FrwedgeExit)		        // Vertex #5
name b9V6   ($lengthTotal 	        $radialExit 	        $BkwedgeExit)		        // Vertex #6
name b9V7   ($lengthThroat 	        $radialThroat 	        $BkwedgeThroat)

);


blocks
(
//Block 7 - Centerline to Middle Main Chamber (including Injector tip)
//hex (b7V0 b7V1 b7V1 b7V0 b7V4 b7V5 b7V6 b7V7)   (n_x7  1 n_y7)
//    simpleGrading
//	(
//		(
//			(b8Tob7XRatio b8Tob7CellRatio 1)   //% x-dir, % cells, expansion coeff
//			(b9Tob7XRatio b9Tob7CellRatio 1)
//		)
//			1               // z-cell grading
//		    1               // y-cell grading
//	)

//Block 8 - Converging Section: Chamber to Throat
hex (b8V0 b8V1 b8V1 b8V0 b8V4 b8V5 b8V6 b8V7)   (1  1 25)  simpleGrading (1 1 1)

//Block 9 - Diverging Section: Throat to Exit
hex (b9V0 b9V1 b9V1 b9V0 b9V4 b9V5 b9V6 b9V7)   (60  1 25)  simpleGrading (1 1 1)

);

boundary
(
     front
     {
           type wedge;
           faces
           (
			   //(b7V0 b7V1 b7V5 b7V4)		//Block 7
			   (b8V0 b8V1 b8V5 b8V4)		//Block 8
			   (b9V0 b9V1 b9V5 b9V4)		//Block 9
           );
      }
     back
     {
           type wedge;
           faces
           (
			   //(b7V7 b7V6 b7V1 b7V0)		//Block 7
			   (b8V7 b8V6 b8V1 b8V0)		//Block 8
			   (b9V7 b9V6 b9V1 b9V0)		//Block 9
           );
      }
     walls
     {
           type wall;
           faces
           (
			   (b8V4 b8V5 b8V6 b8V7)	    //Block 8 - Converging Section Outer Wall
			   (b9V4 b9V5 b9V6 b9V7)	    //Block 9 - Diverging Section Outer Wall
           );
      }
    inlet
    {
          type patch;
          faces
          (
          (b8V4 b8V7 b8V0 b8V0)	    //Block 8 - Slave Merge Face
          //(b7V4 b7V7 b7V0 b7V0)	    //Block 7 - Injector Tip Y Plane
          );
    }
//       master6897
//     {
//           type patch;
//           faces
//           (
//               (b8V2 b8V1 b8V0 b8V3)	    //Block 6 - Master Merge Face
//               (b9V2 b9V1 b9V0 b9V3)	    //Block 6 - Master Merge Face
//           );
//      }
//      slave6897
//     {
//           type patch;
//           faces
//           (
//               (b7V4 b7V5 b7V6 b7V7)	    //Block 7 - Slave Merge Face
//           );
//      }
        master89
     {
           type patch;
           faces
           (
               (b8V6 b8V5 b8V1 b8V1)	    //Block 8 - Master Merge Face
           );
      }
      slave89
     {
           type patch;
           faces
           (
               (b9V4 b9V7 b9V0 b9V0)	    //Block 9 - Slave Merge Face
           );
      }
     outlet
     {
           type patch;
           faces
           (
               (b9V6 b9V5 b9V1 b9V1)	//Block 9 - Exit
               //(b7V6 b7V5 b7V1 b7V1)	//Block 7 - Exit
           );
      }
	 axis
     {
           type empty;
           faces
           (
			   //(b7V0 b7V1 b7V1 b7V0)		//Block 7
         (b8V0 b8V1 b8V1 b8V0)		//Block 8
         (b9V0 b9V1 b9V1 b9V0)		//Block 9
           );
	}
);

mergePatchPairs
(
    ( master89  slave89  )    //  merge patch 8 and 9
    //( master6897  slave6897  )  //  merge patch 6,8,9 and 7
);
